type GridLayout {
    id: ID!
    name: String
    user: User!
    gridLayoutItems: [GridLayoutItem]
}

type GridLayoutItem {
    id: ID!
    gridLayout: GridLayout!
    gridLayoutItemProps: GridLayoutItemProps!
    gridLayoutItemPosition: GridLayoutItemPosition!
}

enum GridLayoutItemType {
    CHATTING
}

type GridLayoutItemProps {
    id: ID!
    type: GridLayoutItemType!

    chatThread: ChatThread
}
input GridLayoutItemPropsInput {
    type: GridLayoutItemType!

    chatThreadInput: ChatThreadInput
}

type GridLayoutItemPosition {
    key: ID!

    x: Int!
    y: Int!
    w: Int!
    h: Int!

    maxH: Int
    maxW: Int
    minH: Int
    minW: Int

    isDraggable: Boolean
    isResizable: Boolean
    isStatic: Boolean
    draggableHandle: String
}

input GridLayoutItemPositionInput {
    x: Int
    y: Int
    w: Int
    h: Int

    maxH: Int
    maxW: Int
    minH: Int
    minW: Int

    isDraggable: Boolean
    isResizable: Boolean
    isStatic: Boolean
    draggableHandle: String
}

extend type Query {
    getGridLayoutItems(gridLayoutId: ID!): [GridLayoutItem]!
    getGridLayouts(userId: ID!): [GridLayout]!
}

extend type Mutation {
    newGridLayout(name: String!, userId: ID!): GridLayout!
    newGridLayoutItem(gridLayoutId: ID!, gridLayoutItemPropsInput: GridLayoutItemPropsInput!): GridLayoutItem!

    updateGridLayout(gridLayoutId: ID!, gridLayoutItemId: ID!, gridLayoutItemPosition: GridLayoutItemPositionInput!): GridLayoutItemPosition!
    updateGridLayoutName(gridLayoutId: ID!, name: String!): GridLayout!

    deleteGridLayout(gridLayoutId: ID!): Boolean!
    deleteGridLayoutItem(gridLayoutItemId: ID!): Boolean!
}

extend type Subscription {
    linkGridLayoutItem(gridLayoutId: ID!): GridLayoutItem!
}
